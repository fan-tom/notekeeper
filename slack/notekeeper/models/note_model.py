import uuid

from django.db import models, connection
from django.db.models import Func, QuerySet
from django.utils import timezone

from core.entities import Note
from common.models import TsStatModel


# REVIEW M1ha: Зачем делать лишнюю вложенность ради одной модели?
#   Можно было просто создать models.py без вложения в package.


class NoteQuerySet(models.QuerySet):
    def top_used_words(self) -> QuerySet[TsStatModel]:
        query = self.annotate(tsv=Func('text', function='to_tsvector'))

        query_str = query.values('tsv')

        (query, params) = query_str.query.sql_with_params()
        cursor = connection.cursor()
        str_query = cursor.mogrify(query, params).decode()

        # REVIEW M1ha: По-моему тут было достаточно вернуть словарь. Зачем отдельная модель? Что она дает?
        #  Только извращеня с table_function.
        return TsStatModel.objects.all().table_function(query=str_query)


class NoteModel(models.Model):
    # REVIEW M1ha: Зачем делать id GUID-ом? Поиск по строкам в разы медленнее, чем по int.
    #  Памяти тоже потребляют много больше. Если дело в кол-ве записей - можно было использовать BigAutoField,
    #  Чтобы в базе был UInt64 (https://docs.djangoproject.com/en/3.1/ref/models/fields/#bigautofield)
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    user_id = models.CharField(max_length=128, editable=False)

    # REVIEW M1ha: И за чем же дело стало? Это можно сделать через django и миграции
    #   https://docs.djangoproject.com/en/3.1/ref/contrib/postgres/indexes/
    # TODO: create GIN index over either to_tsvector function or autogenerated column (if required)
    # see https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX 12.2.2. Creating Indexes
    text = models.TextField()

    # REVIEW M1ha: для этого есть параметр auto_now_add=True.
    #  https://docs.djangoproject.com/en/3.1/ref/models/fields/#django.db.models.DateField.auto_now_add
    created_at = models.DateTimeField(default=timezone.now)

    # REVIEW M1ha: Круто, не знал, что так можно. Я обычно делаю класс менеджера + BaseManager.from_queryset(MyQuerySet)
    #  Возьму на вооружение.
    objects = NoteQuerySet.as_manager()

    # REVIEW M1ha: Вот зачем это приведение, если можно все расположить в модели и не делать лишних телодвижений?
    def to_note(self):
        return Note(self.id, self.user_id, self.text, self.created_at)
